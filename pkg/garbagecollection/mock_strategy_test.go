// Code generated by mockery v2.20.0. DO NOT EDIT.

package garbagecollection

import (
	v1 "github.com/cloudogu/k8s-backup-operator/pkg/api/v1"
	retention "github.com/cloudogu/k8s-backup-operator/pkg/retention"
	mock "github.com/stretchr/testify/mock"
)

// mockStrategy is an autogenerated mock type for the strategy type
type mockStrategy struct {
	mock.Mock
}

type mockStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStrategy) EXPECT() *mockStrategy_Expecter {
	return &mockStrategy_Expecter{mock: &_m.Mock}
}

// FilterForRemoval provides a mock function with given fields: allBackups
func (_m *mockStrategy) FilterForRemoval(allBackups []v1.Backup) (retention.RemovedBackups, retention.RetainedBackups) {
	ret := _m.Called(allBackups)

	var r0 retention.RemovedBackups
	var r1 retention.RetainedBackups
	if rf, ok := ret.Get(0).(func([]v1.Backup) (retention.RemovedBackups, retention.RetainedBackups)); ok {
		return rf(allBackups)
	}
	if rf, ok := ret.Get(0).(func([]v1.Backup) retention.RemovedBackups); ok {
		r0 = rf(allBackups)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(retention.RemovedBackups)
		}
	}

	if rf, ok := ret.Get(1).(func([]v1.Backup) retention.RetainedBackups); ok {
		r1 = rf(allBackups)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(retention.RetainedBackups)
		}
	}

	return r0, r1
}

// mockStrategy_FilterForRemoval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterForRemoval'
type mockStrategy_FilterForRemoval_Call struct {
	*mock.Call
}

// FilterForRemoval is a helper method to define mock.On call
//   - allBackups []v1.Backup
func (_e *mockStrategy_Expecter) FilterForRemoval(allBackups interface{}) *mockStrategy_FilterForRemoval_Call {
	return &mockStrategy_FilterForRemoval_Call{Call: _e.mock.On("FilterForRemoval", allBackups)}
}

func (_c *mockStrategy_FilterForRemoval_Call) Run(run func(allBackups []v1.Backup)) *mockStrategy_FilterForRemoval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]v1.Backup))
	})
	return _c
}

func (_c *mockStrategy_FilterForRemoval_Call) Return(_a0 retention.RemovedBackups, _a1 retention.RetainedBackups) *mockStrategy_FilterForRemoval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockStrategy_FilterForRemoval_Call) RunAndReturn(run func([]v1.Backup) (retention.RemovedBackups, retention.RetainedBackups)) *mockStrategy_FilterForRemoval_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *mockStrategy) GetName() retention.StrategyId {
	ret := _m.Called()

	var r0 retention.StrategyId
	if rf, ok := ret.Get(0).(func() retention.StrategyId); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(retention.StrategyId)
	}

	return r0
}

// mockStrategy_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type mockStrategy_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *mockStrategy_Expecter) GetName() *mockStrategy_GetName_Call {
	return &mockStrategy_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *mockStrategy_GetName_Call) Run(run func()) *mockStrategy_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockStrategy_GetName_Call) Return(_a0 retention.StrategyId) *mockStrategy_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStrategy_GetName_Call) RunAndReturn(run func() retention.StrategyId) *mockStrategy_GetName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockStrategy interface {
	mock.TestingT
	Cleanup(func())
}

// newMockStrategy creates a new instance of mockStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockStrategy(t mockConstructorTestingTnewMockStrategy) *mockStrategy {
	mock := &mockStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
