// Code generated by mockery v2.53.3. DO NOT EDIT.

package cleanup

import (
	mock "github.com/stretchr/testify/mock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// mockObject is an autogenerated mock type for the object type
type mockObject struct {
	mock.Mock
}

type mockObject_Expecter struct {
	mock *mock.Mock
}

func (_m *mockObject) EXPECT() *mockObject_Expecter {
	return &mockObject_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with no fields
func (_m *mockObject) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockObject_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type mockObject_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *mockObject_Expecter) GetName() *mockObject_GetName_Call {
	return &mockObject_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *mockObject_GetName_Call) Run(run func()) *mockObject_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockObject_GetName_Call) Return(_a0 string) *mockObject_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockObject_GetName_Call) RunAndReturn(run func() string) *mockObject_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GroupVersionKind provides a mock function with no fields
func (_m *mockObject) GroupVersionKind() schema.GroupVersionKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupVersionKind")
	}

	var r0 schema.GroupVersionKind
	if rf, ok := ret.Get(0).(func() schema.GroupVersionKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schema.GroupVersionKind)
	}

	return r0
}

// mockObject_GroupVersionKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupVersionKind'
type mockObject_GroupVersionKind_Call struct {
	*mock.Call
}

// GroupVersionKind is a helper method to define mock.On call
func (_e *mockObject_Expecter) GroupVersionKind() *mockObject_GroupVersionKind_Call {
	return &mockObject_GroupVersionKind_Call{Call: _e.mock.On("GroupVersionKind")}
}

func (_c *mockObject_GroupVersionKind_Call) Run(run func()) *mockObject_GroupVersionKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockObject_GroupVersionKind_Call) Return(_a0 schema.GroupVersionKind) *mockObject_GroupVersionKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockObject_GroupVersionKind_Call) RunAndReturn(run func() schema.GroupVersionKind) *mockObject_GroupVersionKind_Call {
	_c.Call.Return(run)
	return _c
}

// newMockObject creates a new instance of mockObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockObject {
	mock := &mockObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
