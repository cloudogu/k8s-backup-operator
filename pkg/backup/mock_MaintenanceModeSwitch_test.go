// Code generated by mockery v2.20.0. DO NOT EDIT.

package backup

import mock "github.com/stretchr/testify/mock"

// MockMaintenanceModeSwitch is an autogenerated mock type for the MaintenanceModeSwitch type
type MockMaintenanceModeSwitch struct {
	mock.Mock
}

type MockMaintenanceModeSwitch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaintenanceModeSwitch) EXPECT() *MockMaintenanceModeSwitch_Expecter {
	return &MockMaintenanceModeSwitch_Expecter{mock: &_m.Mock}
}

// ActivateMaintenanceMode provides a mock function with given fields: title, text
func (_m *MockMaintenanceModeSwitch) ActivateMaintenanceMode(title string, text string) error {
	ret := _m.Called(title, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(title, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateMaintenanceMode'
type MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call struct {
	*mock.Call
}

// ActivateMaintenanceMode is a helper method to define mock.On call
//   - title string
//   - text string
func (_e *MockMaintenanceModeSwitch_Expecter) ActivateMaintenanceMode(title interface{}, text interface{}) *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call {
	return &MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call{Call: _e.mock.On("ActivateMaintenanceMode", title, text)}
}

func (_c *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call) Run(run func(title string, text string)) *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call) Return(_a0 error) *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call) RunAndReturn(run func(string, string) error) *MockMaintenanceModeSwitch_ActivateMaintenanceMode_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateMaintenanceMode provides a mock function with given fields:
func (_m *MockMaintenanceModeSwitch) DeactivateMaintenanceMode() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateMaintenanceMode'
type MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call struct {
	*mock.Call
}

// DeactivateMaintenanceMode is a helper method to define mock.On call
func (_e *MockMaintenanceModeSwitch_Expecter) DeactivateMaintenanceMode() *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call {
	return &MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call{Call: _e.mock.On("DeactivateMaintenanceMode")}
}

func (_c *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call) Run(run func()) *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call) Return(_a0 error) *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call) RunAndReturn(run func() error) *MockMaintenanceModeSwitch_DeactivateMaintenanceMode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMaintenanceModeSwitch interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMaintenanceModeSwitch creates a new instance of MockMaintenanceModeSwitch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMaintenanceModeSwitch(t mockConstructorTestingTNewMockMaintenanceModeSwitch) *MockMaintenanceModeSwitch {
	mock := &MockMaintenanceModeSwitch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
