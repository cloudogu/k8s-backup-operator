// Code generated by mockery v2.53.3. DO NOT EDIT.

package backup

import (
	context "context"

	repository "github.com/cloudogu/k8s-registry-lib/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockMaintenanceModeSwitch is an autogenerated mock type for the MaintenanceModeSwitch type
type MockMaintenanceModeSwitch struct {
	mock.Mock
}

type MockMaintenanceModeSwitch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaintenanceModeSwitch) EXPECT() *MockMaintenanceModeSwitch_Expecter {
	return &MockMaintenanceModeSwitch_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: ctx, description
func (_m *MockMaintenanceModeSwitch) Activate(ctx context.Context, description repository.MaintenanceModeDescription) error {
	ret := _m.Called(ctx, description)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.MaintenanceModeDescription) error); ok {
		r0 = rf(ctx, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaintenanceModeSwitch_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type MockMaintenanceModeSwitch_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
//   - description repository.MaintenanceModeDescription
func (_e *MockMaintenanceModeSwitch_Expecter) Activate(ctx interface{}, description interface{}) *MockMaintenanceModeSwitch_Activate_Call {
	return &MockMaintenanceModeSwitch_Activate_Call{Call: _e.mock.On("Activate", ctx, description)}
}

func (_c *MockMaintenanceModeSwitch_Activate_Call) Run(run func(ctx context.Context, description repository.MaintenanceModeDescription)) *MockMaintenanceModeSwitch_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.MaintenanceModeDescription))
	})
	return _c
}

func (_c *MockMaintenanceModeSwitch_Activate_Call) Return(_a0 error) *MockMaintenanceModeSwitch_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaintenanceModeSwitch_Activate_Call) RunAndReturn(run func(context.Context, repository.MaintenanceModeDescription) error) *MockMaintenanceModeSwitch_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function with given fields: ctx
func (_m *MockMaintenanceModeSwitch) Deactivate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaintenanceModeSwitch_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type MockMaintenanceModeSwitch_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMaintenanceModeSwitch_Expecter) Deactivate(ctx interface{}) *MockMaintenanceModeSwitch_Deactivate_Call {
	return &MockMaintenanceModeSwitch_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx)}
}

func (_c *MockMaintenanceModeSwitch_Deactivate_Call) Run(run func(ctx context.Context)) *MockMaintenanceModeSwitch_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMaintenanceModeSwitch_Deactivate_Call) Return(_a0 error) *MockMaintenanceModeSwitch_Deactivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaintenanceModeSwitch_Deactivate_Call) RunAndReturn(run func(context.Context) error) *MockMaintenanceModeSwitch_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMaintenanceModeSwitch creates a new instance of MockMaintenanceModeSwitch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaintenanceModeSwitch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaintenanceModeSwitch {
	mock := &MockMaintenanceModeSwitch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
