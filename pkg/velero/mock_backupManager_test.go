// Code generated by mockery v2.20.0. DO NOT EDIT.

package velero

import (
	context "context"

	v1 "github.com/cloudogu/k8s-backup-operator/pkg/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// mockBackupManager is an autogenerated mock type for the backupManager type
type mockBackupManager struct {
	mock.Mock
}

type mockBackupManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBackupManager) EXPECT() *mockBackupManager_Expecter {
	return &mockBackupManager_Expecter{mock: &_m.Mock}
}

// CreateBackup provides a mock function with given fields: ctx, backup
func (_m *mockBackupManager) CreateBackup(ctx context.Context, backup *v1.Backup) error {
	ret := _m.Called(ctx, backup)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) error); ok {
		r0 = rf(ctx, backup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBackupManager_CreateBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackup'
type mockBackupManager_CreateBackup_Call struct {
	*mock.Call
}

// CreateBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - backup *v1.Backup
func (_e *mockBackupManager_Expecter) CreateBackup(ctx interface{}, backup interface{}) *mockBackupManager_CreateBackup_Call {
	return &mockBackupManager_CreateBackup_Call{Call: _e.mock.On("CreateBackup", ctx, backup)}
}

func (_c *mockBackupManager_CreateBackup_Call) Run(run func(ctx context.Context, backup *v1.Backup)) *mockBackupManager_CreateBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Backup))
	})
	return _c
}

func (_c *mockBackupManager_CreateBackup_Call) Return(_a0 error) *mockBackupManager_CreateBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupManager_CreateBackup_Call) RunAndReturn(run func(context.Context, *v1.Backup) error) *mockBackupManager_CreateBackup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackup provides a mock function with given fields: ctx, backup
func (_m *mockBackupManager) DeleteBackup(ctx context.Context, backup *v1.Backup) error {
	ret := _m.Called(ctx, backup)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) error); ok {
		r0 = rf(ctx, backup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBackupManager_DeleteBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackup'
type mockBackupManager_DeleteBackup_Call struct {
	*mock.Call
}

// DeleteBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - backup *v1.Backup
func (_e *mockBackupManager_Expecter) DeleteBackup(ctx interface{}, backup interface{}) *mockBackupManager_DeleteBackup_Call {
	return &mockBackupManager_DeleteBackup_Call{Call: _e.mock.On("DeleteBackup", ctx, backup)}
}

func (_c *mockBackupManager_DeleteBackup_Call) Run(run func(ctx context.Context, backup *v1.Backup)) *mockBackupManager_DeleteBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Backup))
	})
	return _c
}

func (_c *mockBackupManager_DeleteBackup_Call) Return(_a0 error) *mockBackupManager_DeleteBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupManager_DeleteBackup_Call) RunAndReturn(run func(context.Context, *v1.Backup) error) *mockBackupManager_DeleteBackup_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockBackupManager interface {
	mock.TestingT
	Cleanup(func())
}

// newMockBackupManager creates a new instance of mockBackupManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockBackupManager(t mockConstructorTestingTnewMockBackupManager) *mockBackupManager {
	mock := &mockBackupManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
