// Code generated by mockery v2.53.3. DO NOT EDIT.

package velero

import (
	context "context"

	v1 "github.com/cloudogu/k8s-backup-lib/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// mockSyncManager is an autogenerated mock type for the syncManager type
type mockSyncManager struct {
	mock.Mock
}

type mockSyncManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSyncManager) EXPECT() *mockSyncManager_Expecter {
	return &mockSyncManager_Expecter{mock: &_m.Mock}
}

// SyncBackupStatus provides a mock function with given fields: ctx, backup
func (_m *mockSyncManager) SyncBackupStatus(ctx context.Context, backup *v1.Backup) error {
	ret := _m.Called(ctx, backup)

	if len(ret) == 0 {
		panic("no return value specified for SyncBackupStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) error); ok {
		r0 = rf(ctx, backup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSyncManager_SyncBackupStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBackupStatus'
type mockSyncManager_SyncBackupStatus_Call struct {
	*mock.Call
}

// SyncBackupStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - backup *v1.Backup
func (_e *mockSyncManager_Expecter) SyncBackupStatus(ctx interface{}, backup interface{}) *mockSyncManager_SyncBackupStatus_Call {
	return &mockSyncManager_SyncBackupStatus_Call{Call: _e.mock.On("SyncBackupStatus", ctx, backup)}
}

func (_c *mockSyncManager_SyncBackupStatus_Call) Run(run func(ctx context.Context, backup *v1.Backup)) *mockSyncManager_SyncBackupStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Backup))
	})
	return _c
}

func (_c *mockSyncManager_SyncBackupStatus_Call) Return(_a0 error) *mockSyncManager_SyncBackupStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSyncManager_SyncBackupStatus_Call) RunAndReturn(run func(context.Context, *v1.Backup) error) *mockSyncManager_SyncBackupStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SyncBackups provides a mock function with given fields: ctx
func (_m *mockSyncManager) SyncBackups(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncBackups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSyncManager_SyncBackups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBackups'
type mockSyncManager_SyncBackups_Call struct {
	*mock.Call
}

// SyncBackups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockSyncManager_Expecter) SyncBackups(ctx interface{}) *mockSyncManager_SyncBackups_Call {
	return &mockSyncManager_SyncBackups_Call{Call: _e.mock.On("SyncBackups", ctx)}
}

func (_c *mockSyncManager_SyncBackups_Call) Run(run func(ctx context.Context)) *mockSyncManager_SyncBackups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockSyncManager_SyncBackups_Call) Return(_a0 error) *mockSyncManager_SyncBackups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSyncManager_SyncBackups_Call) RunAndReturn(run func(context.Context) error) *mockSyncManager_SyncBackups_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSyncManager creates a new instance of mockSyncManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSyncManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSyncManager {
	mock := &mockSyncManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
