// Code generated by mockery v2.53.3. DO NOT EDIT.

package requeue

import (
	ecosystem "github.com/cloudogu/k8s-backup-lib/api/ecosystem"
	mock "github.com/stretchr/testify/mock"
)

// mockBackupV1Alpha1Interface is an autogenerated mock type for the backupV1Alpha1Interface type
type mockBackupV1Alpha1Interface struct {
	mock.Mock
}

type mockBackupV1Alpha1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBackupV1Alpha1Interface) EXPECT() *mockBackupV1Alpha1Interface_Expecter {
	return &mockBackupV1Alpha1Interface_Expecter{mock: &_m.Mock}
}

// BackupSchedules provides a mock function with given fields: namespace
func (_m *mockBackupV1Alpha1Interface) BackupSchedules(namespace string) ecosystem.BackupScheduleInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for BackupSchedules")
	}

	var r0 ecosystem.BackupScheduleInterface
	if rf, ok := ret.Get(0).(func(string) ecosystem.BackupScheduleInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ecosystem.BackupScheduleInterface)
		}
	}

	return r0
}

// mockBackupV1Alpha1Interface_BackupSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupSchedules'
type mockBackupV1Alpha1Interface_BackupSchedules_Call struct {
	*mock.Call
}

// BackupSchedules is a helper method to define mock.On call
//   - namespace string
func (_e *mockBackupV1Alpha1Interface_Expecter) BackupSchedules(namespace interface{}) *mockBackupV1Alpha1Interface_BackupSchedules_Call {
	return &mockBackupV1Alpha1Interface_BackupSchedules_Call{Call: _e.mock.On("BackupSchedules", namespace)}
}

func (_c *mockBackupV1Alpha1Interface_BackupSchedules_Call) Run(run func(namespace string)) *mockBackupV1Alpha1Interface_BackupSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockBackupV1Alpha1Interface_BackupSchedules_Call) Return(_a0 ecosystem.BackupScheduleInterface) *mockBackupV1Alpha1Interface_BackupSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupV1Alpha1Interface_BackupSchedules_Call) RunAndReturn(run func(string) ecosystem.BackupScheduleInterface) *mockBackupV1Alpha1Interface_BackupSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// Backups provides a mock function with given fields: namespace
func (_m *mockBackupV1Alpha1Interface) Backups(namespace string) ecosystem.BackupInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Backups")
	}

	var r0 ecosystem.BackupInterface
	if rf, ok := ret.Get(0).(func(string) ecosystem.BackupInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ecosystem.BackupInterface)
		}
	}

	return r0
}

// mockBackupV1Alpha1Interface_Backups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backups'
type mockBackupV1Alpha1Interface_Backups_Call struct {
	*mock.Call
}

// Backups is a helper method to define mock.On call
//   - namespace string
func (_e *mockBackupV1Alpha1Interface_Expecter) Backups(namespace interface{}) *mockBackupV1Alpha1Interface_Backups_Call {
	return &mockBackupV1Alpha1Interface_Backups_Call{Call: _e.mock.On("Backups", namespace)}
}

func (_c *mockBackupV1Alpha1Interface_Backups_Call) Run(run func(namespace string)) *mockBackupV1Alpha1Interface_Backups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockBackupV1Alpha1Interface_Backups_Call) Return(_a0 ecosystem.BackupInterface) *mockBackupV1Alpha1Interface_Backups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupV1Alpha1Interface_Backups_Call) RunAndReturn(run func(string) ecosystem.BackupInterface) *mockBackupV1Alpha1Interface_Backups_Call {
	_c.Call.Return(run)
	return _c
}

// Restores provides a mock function with given fields: namespace
func (_m *mockBackupV1Alpha1Interface) Restores(namespace string) ecosystem.RestoreInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Restores")
	}

	var r0 ecosystem.RestoreInterface
	if rf, ok := ret.Get(0).(func(string) ecosystem.RestoreInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ecosystem.RestoreInterface)
		}
	}

	return r0
}

// mockBackupV1Alpha1Interface_Restores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restores'
type mockBackupV1Alpha1Interface_Restores_Call struct {
	*mock.Call
}

// Restores is a helper method to define mock.On call
//   - namespace string
func (_e *mockBackupV1Alpha1Interface_Expecter) Restores(namespace interface{}) *mockBackupV1Alpha1Interface_Restores_Call {
	return &mockBackupV1Alpha1Interface_Restores_Call{Call: _e.mock.On("Restores", namespace)}
}

func (_c *mockBackupV1Alpha1Interface_Restores_Call) Run(run func(namespace string)) *mockBackupV1Alpha1Interface_Restores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockBackupV1Alpha1Interface_Restores_Call) Return(_a0 ecosystem.RestoreInterface) *mockBackupV1Alpha1Interface_Restores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupV1Alpha1Interface_Restores_Call) RunAndReturn(run func(string) ecosystem.RestoreInterface) *mockBackupV1Alpha1Interface_Restores_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBackupV1Alpha1Interface creates a new instance of mockBackupV1Alpha1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBackupV1Alpha1Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBackupV1Alpha1Interface {
	mock := &mockBackupV1Alpha1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
