// Code generated by mockery v2.42.1. DO NOT EDIT.

package additionalimages

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	types "k8s.io/apimachinery/pkg/types"

	v1 "github.com/cloudogu/k8s-backup-operator/pkg/api/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// mockBackupScheduleClient is an autogenerated mock type for the backupScheduleClient type
type mockBackupScheduleClient struct {
	mock.Mock
}

type mockBackupScheduleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBackupScheduleClient) EXPECT() *mockBackupScheduleClient_Expecter {
	return &mockBackupScheduleClient_Expecter{mock: &_m.Mock}
}

// AddFinalizer provides a mock function with given fields: ctx, backupSchedule, finalizer
func (_m *mockBackupScheduleClient) AddFinalizer(ctx context.Context, backupSchedule *v1.BackupSchedule, finalizer string) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule, finalizer)

	if len(ret) == 0 {
		panic("no return value specified for AddFinalizer")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, string) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule, finalizer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, string) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule, finalizer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule, string) error); ok {
		r1 = rf(ctx, backupSchedule, finalizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_AddFinalizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFinalizer'
type mockBackupScheduleClient_AddFinalizer_Call struct {
	*mock.Call
}

// AddFinalizer is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
//   - finalizer string
func (_e *mockBackupScheduleClient_Expecter) AddFinalizer(ctx interface{}, backupSchedule interface{}, finalizer interface{}) *mockBackupScheduleClient_AddFinalizer_Call {
	return &mockBackupScheduleClient_AddFinalizer_Call{Call: _e.mock.On("AddFinalizer", ctx, backupSchedule, finalizer)}
}

func (_c *mockBackupScheduleClient_AddFinalizer_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule, finalizer string)) *mockBackupScheduleClient_AddFinalizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule), args[2].(string))
	})
	return _c
}

func (_c *mockBackupScheduleClient_AddFinalizer_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_AddFinalizer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_AddFinalizer_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule, string) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_AddFinalizer_Call {
	_c.Call.Return(run)
	return _c
}

// AddLabels provides a mock function with given fields: ctx, backupSchedule
func (_m *mockBackupScheduleClient) AddLabels(ctx context.Context, backupSchedule *v1.BackupSchedule) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule)

	if len(ret) == 0 {
		panic("no return value specified for AddLabels")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule) error); ok {
		r1 = rf(ctx, backupSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_AddLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLabels'
type mockBackupScheduleClient_AddLabels_Call struct {
	*mock.Call
}

// AddLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
func (_e *mockBackupScheduleClient_Expecter) AddLabels(ctx interface{}, backupSchedule interface{}) *mockBackupScheduleClient_AddLabels_Call {
	return &mockBackupScheduleClient_AddLabels_Call{Call: _e.mock.On("AddLabels", ctx, backupSchedule)}
}

func (_c *mockBackupScheduleClient_AddLabels_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule)) *mockBackupScheduleClient_AddLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule))
	})
	return _c
}

func (_c *mockBackupScheduleClient_AddLabels_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_AddLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_AddLabels_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_AddLabels_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, backupSchedule, opts
func (_m *mockBackupScheduleClient) Create(ctx context.Context, backupSchedule *v1.BackupSchedule, opts metav1.CreateOptions) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, metav1.CreateOptions) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, metav1.CreateOptions) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, backupSchedule, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockBackupScheduleClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
//   - opts metav1.CreateOptions
func (_e *mockBackupScheduleClient_Expecter) Create(ctx interface{}, backupSchedule interface{}, opts interface{}) *mockBackupScheduleClient_Create_Call {
	return &mockBackupScheduleClient_Create_Call{Call: _e.mock.On("Create", ctx, backupSchedule, opts)}
}

func (_c *mockBackupScheduleClient_Create_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule, opts metav1.CreateOptions)) *mockBackupScheduleClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_Create_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_Create_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule, metav1.CreateOptions) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *mockBackupScheduleClient) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBackupScheduleClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockBackupScheduleClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.DeleteOptions
func (_e *mockBackupScheduleClient_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *mockBackupScheduleClient_Delete_Call {
	return &mockBackupScheduleClient_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *mockBackupScheduleClient_Delete_Call) Run(run func(ctx context.Context, name string, opts metav1.DeleteOptions)) *mockBackupScheduleClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.DeleteOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_Delete_Call) Return(_a0 error) *mockBackupScheduleClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupScheduleClient_Delete_Call) RunAndReturn(run func(context.Context, string, metav1.DeleteOptions) error) *mockBackupScheduleClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function with given fields: ctx, opts, listOpts
func (_m *mockBackupScheduleClient) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	ret := _m.Called(ctx, opts, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error); ok {
		r0 = rf(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBackupScheduleClient_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type mockBackupScheduleClient_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.DeleteOptions
//   - listOpts metav1.ListOptions
func (_e *mockBackupScheduleClient_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *mockBackupScheduleClient_DeleteCollection_Call {
	return &mockBackupScheduleClient_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *mockBackupScheduleClient_DeleteCollection_Call) Run(run func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions)) *mockBackupScheduleClient_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.DeleteOptions), args[2].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_DeleteCollection_Call) Return(_a0 error) *mockBackupScheduleClient_DeleteCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackupScheduleClient_DeleteCollection_Call) RunAndReturn(run func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error) *mockBackupScheduleClient_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *mockBackupScheduleClient) Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *v1.BackupSchedule); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockBackupScheduleClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.GetOptions
func (_e *mockBackupScheduleClient_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *mockBackupScheduleClient_Get_Call {
	return &mockBackupScheduleClient_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *mockBackupScheduleClient_Get_Call) Run(run func(ctx context.Context, name string, opts metav1.GetOptions)) *mockBackupScheduleClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.GetOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_Get_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_Get_Call) RunAndReturn(run func(context.Context, string, metav1.GetOptions) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *mockBackupScheduleClient) List(ctx context.Context, opts metav1.ListOptions) (*v1.BackupScheduleList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.BackupScheduleList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (*v1.BackupScheduleList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) *v1.BackupScheduleList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupScheduleList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type mockBackupScheduleClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *mockBackupScheduleClient_Expecter) List(ctx interface{}, opts interface{}) *mockBackupScheduleClient_List_Call {
	return &mockBackupScheduleClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *mockBackupScheduleClient_List_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *mockBackupScheduleClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_List_Call) Return(_a0 *v1.BackupScheduleList, _a1 error) *mockBackupScheduleClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_List_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (*v1.BackupScheduleList, error)) *mockBackupScheduleClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *mockBackupScheduleClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*v1.BackupSchedule, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, name, pt, data, opts, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) *v1.BackupSchedule); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type mockBackupScheduleClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts metav1.PatchOptions
//   - subresources ...string
func (_e *mockBackupScheduleClient_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *mockBackupScheduleClient_Patch_Call {
	return &mockBackupScheduleClient_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *mockBackupScheduleClient_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string)) *mockBackupScheduleClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(types.PatchType), args[3].([]byte), args[4].(metav1.PatchOptions), variadicArgs...)
	})
	return _c
}

func (_c *mockBackupScheduleClient_Patch_Call) Return(result *v1.BackupSchedule, err error) *mockBackupScheduleClient_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockBackupScheduleClient_Patch_Call) RunAndReturn(run func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFinalizer provides a mock function with given fields: ctx, backupSchedule, finalizer
func (_m *mockBackupScheduleClient) RemoveFinalizer(ctx context.Context, backupSchedule *v1.BackupSchedule, finalizer string) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule, finalizer)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFinalizer")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, string) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule, finalizer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, string) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule, finalizer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule, string) error); ok {
		r1 = rf(ctx, backupSchedule, finalizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_RemoveFinalizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFinalizer'
type mockBackupScheduleClient_RemoveFinalizer_Call struct {
	*mock.Call
}

// RemoveFinalizer is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
//   - finalizer string
func (_e *mockBackupScheduleClient_Expecter) RemoveFinalizer(ctx interface{}, backupSchedule interface{}, finalizer interface{}) *mockBackupScheduleClient_RemoveFinalizer_Call {
	return &mockBackupScheduleClient_RemoveFinalizer_Call{Call: _e.mock.On("RemoveFinalizer", ctx, backupSchedule, finalizer)}
}

func (_c *mockBackupScheduleClient_RemoveFinalizer_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule, finalizer string)) *mockBackupScheduleClient_RemoveFinalizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule), args[2].(string))
	})
	return _c
}

func (_c *mockBackupScheduleClient_RemoveFinalizer_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_RemoveFinalizer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_RemoveFinalizer_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule, string) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_RemoveFinalizer_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, backupSchedule, opts
func (_m *mockBackupScheduleClient) Update(ctx context.Context, backupSchedule *v1.BackupSchedule, opts metav1.UpdateOptions) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, backupSchedule, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockBackupScheduleClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
//   - opts metav1.UpdateOptions
func (_e *mockBackupScheduleClient_Expecter) Update(ctx interface{}, backupSchedule interface{}, opts interface{}) *mockBackupScheduleClient_Update_Call {
	return &mockBackupScheduleClient_Update_Call{Call: _e.mock.On("Update", ctx, backupSchedule, opts)}
}

func (_c *mockBackupScheduleClient_Update_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule, opts metav1.UpdateOptions)) *mockBackupScheduleClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_Update_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_Update_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, backupSchedule, opts
func (_m *mockBackupScheduleClient) UpdateStatus(ctx context.Context, backupSchedule *v1.BackupSchedule, opts metav1.UpdateOptions) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, backupSchedule, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type mockBackupScheduleClient_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
//   - opts metav1.UpdateOptions
func (_e *mockBackupScheduleClient_Expecter) UpdateStatus(ctx interface{}, backupSchedule interface{}, opts interface{}) *mockBackupScheduleClient_UpdateStatus_Call {
	return &mockBackupScheduleClient_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, backupSchedule, opts)}
}

func (_c *mockBackupScheduleClient_UpdateStatus_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule, opts metav1.UpdateOptions)) *mockBackupScheduleClient_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatus_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatus_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule, metav1.UpdateOptions) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusCreated provides a mock function with given fields: ctx, backupSchedule
func (_m *mockBackupScheduleClient) UpdateStatusCreated(ctx context.Context, backupSchedule *v1.BackupSchedule) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusCreated")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule) error); ok {
		r1 = rf(ctx, backupSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_UpdateStatusCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusCreated'
type mockBackupScheduleClient_UpdateStatusCreated_Call struct {
	*mock.Call
}

// UpdateStatusCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
func (_e *mockBackupScheduleClient_Expecter) UpdateStatusCreated(ctx interface{}, backupSchedule interface{}) *mockBackupScheduleClient_UpdateStatusCreated_Call {
	return &mockBackupScheduleClient_UpdateStatusCreated_Call{Call: _e.mock.On("UpdateStatusCreated", ctx, backupSchedule)}
}

func (_c *mockBackupScheduleClient_UpdateStatusCreated_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule)) *mockBackupScheduleClient_UpdateStatusCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule))
	})
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusCreated_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_UpdateStatusCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusCreated_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_UpdateStatusCreated_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusCreating provides a mock function with given fields: ctx, backupSchedule
func (_m *mockBackupScheduleClient) UpdateStatusCreating(ctx context.Context, backupSchedule *v1.BackupSchedule) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusCreating")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule) error); ok {
		r1 = rf(ctx, backupSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_UpdateStatusCreating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusCreating'
type mockBackupScheduleClient_UpdateStatusCreating_Call struct {
	*mock.Call
}

// UpdateStatusCreating is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
func (_e *mockBackupScheduleClient_Expecter) UpdateStatusCreating(ctx interface{}, backupSchedule interface{}) *mockBackupScheduleClient_UpdateStatusCreating_Call {
	return &mockBackupScheduleClient_UpdateStatusCreating_Call{Call: _e.mock.On("UpdateStatusCreating", ctx, backupSchedule)}
}

func (_c *mockBackupScheduleClient_UpdateStatusCreating_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule)) *mockBackupScheduleClient_UpdateStatusCreating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule))
	})
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusCreating_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_UpdateStatusCreating_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusCreating_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_UpdateStatusCreating_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusDeleting provides a mock function with given fields: ctx, backupSchedule
func (_m *mockBackupScheduleClient) UpdateStatusDeleting(ctx context.Context, backupSchedule *v1.BackupSchedule) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusDeleting")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule) error); ok {
		r1 = rf(ctx, backupSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_UpdateStatusDeleting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusDeleting'
type mockBackupScheduleClient_UpdateStatusDeleting_Call struct {
	*mock.Call
}

// UpdateStatusDeleting is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
func (_e *mockBackupScheduleClient_Expecter) UpdateStatusDeleting(ctx interface{}, backupSchedule interface{}) *mockBackupScheduleClient_UpdateStatusDeleting_Call {
	return &mockBackupScheduleClient_UpdateStatusDeleting_Call{Call: _e.mock.On("UpdateStatusDeleting", ctx, backupSchedule)}
}

func (_c *mockBackupScheduleClient_UpdateStatusDeleting_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule)) *mockBackupScheduleClient_UpdateStatusDeleting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule))
	})
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusDeleting_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_UpdateStatusDeleting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusDeleting_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_UpdateStatusDeleting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusFailed provides a mock function with given fields: ctx, backupSchedule
func (_m *mockBackupScheduleClient) UpdateStatusFailed(ctx context.Context, backupSchedule *v1.BackupSchedule) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusFailed")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule) error); ok {
		r1 = rf(ctx, backupSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_UpdateStatusFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusFailed'
type mockBackupScheduleClient_UpdateStatusFailed_Call struct {
	*mock.Call
}

// UpdateStatusFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
func (_e *mockBackupScheduleClient_Expecter) UpdateStatusFailed(ctx interface{}, backupSchedule interface{}) *mockBackupScheduleClient_UpdateStatusFailed_Call {
	return &mockBackupScheduleClient_UpdateStatusFailed_Call{Call: _e.mock.On("UpdateStatusFailed", ctx, backupSchedule)}
}

func (_c *mockBackupScheduleClient_UpdateStatusFailed_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule)) *mockBackupScheduleClient_UpdateStatusFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule))
	})
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusFailed_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_UpdateStatusFailed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusFailed_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_UpdateStatusFailed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusUpdating provides a mock function with given fields: ctx, backupSchedule
func (_m *mockBackupScheduleClient) UpdateStatusUpdating(ctx context.Context, backupSchedule *v1.BackupSchedule) (*v1.BackupSchedule, error) {
	ret := _m.Called(ctx, backupSchedule)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusUpdating")
	}

	var r0 *v1.BackupSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)); ok {
		return rf(ctx, backupSchedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BackupSchedule) *v1.BackupSchedule); ok {
		r0 = rf(ctx, backupSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BackupSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BackupSchedule) error); ok {
		r1 = rf(ctx, backupSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_UpdateStatusUpdating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusUpdating'
type mockBackupScheduleClient_UpdateStatusUpdating_Call struct {
	*mock.Call
}

// UpdateStatusUpdating is a helper method to define mock.On call
//   - ctx context.Context
//   - backupSchedule *v1.BackupSchedule
func (_e *mockBackupScheduleClient_Expecter) UpdateStatusUpdating(ctx interface{}, backupSchedule interface{}) *mockBackupScheduleClient_UpdateStatusUpdating_Call {
	return &mockBackupScheduleClient_UpdateStatusUpdating_Call{Call: _e.mock.On("UpdateStatusUpdating", ctx, backupSchedule)}
}

func (_c *mockBackupScheduleClient_UpdateStatusUpdating_Call) Run(run func(ctx context.Context, backupSchedule *v1.BackupSchedule)) *mockBackupScheduleClient_UpdateStatusUpdating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.BackupSchedule))
	})
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusUpdating_Call) Return(_a0 *v1.BackupSchedule, _a1 error) *mockBackupScheduleClient_UpdateStatusUpdating_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_UpdateStatusUpdating_Call) RunAndReturn(run func(context.Context, *v1.BackupSchedule) (*v1.BackupSchedule, error)) *mockBackupScheduleClient_UpdateStatusUpdating_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *mockBackupScheduleClient) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBackupScheduleClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockBackupScheduleClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *mockBackupScheduleClient_Expecter) Watch(ctx interface{}, opts interface{}) *mockBackupScheduleClient_Watch_Call {
	return &mockBackupScheduleClient_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *mockBackupScheduleClient_Watch_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *mockBackupScheduleClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockBackupScheduleClient_Watch_Call) Return(_a0 watch.Interface, _a1 error) *mockBackupScheduleClient_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBackupScheduleClient_Watch_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (watch.Interface, error)) *mockBackupScheduleClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBackupScheduleClient creates a new instance of mockBackupScheduleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBackupScheduleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBackupScheduleClient {
	mock := &mockBackupScheduleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
