// Code generated by mockery v2.53.3. DO NOT EDIT.

package provider

import (
	context "context"

	v1 "github.com/cloudogu/k8s-backup-lib/pkg/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// CheckReady provides a mock function with given fields: ctx
func (_m *MockProvider) CheckReady(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_CheckReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckReady'
type MockProvider_CheckReady_Call struct {
	*mock.Call
}

// CheckReady is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) CheckReady(ctx interface{}) *MockProvider_CheckReady_Call {
	return &MockProvider_CheckReady_Call{Call: _e.mock.On("CheckReady", ctx)}
}

func (_c *MockProvider_CheckReady_Call) Run(run func(ctx context.Context)) *MockProvider_CheckReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProvider_CheckReady_Call) Return(_a0 error) *MockProvider_CheckReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_CheckReady_Call) RunAndReturn(run func(context.Context) error) *MockProvider_CheckReady_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackup provides a mock function with given fields: ctx, backup
func (_m *MockProvider) CreateBackup(ctx context.Context, backup *v1.Backup) error {
	ret := _m.Called(ctx, backup)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) error); ok {
		r0 = rf(ctx, backup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_CreateBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackup'
type MockProvider_CreateBackup_Call struct {
	*mock.Call
}

// CreateBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - backup *v1.Backup
func (_e *MockProvider_Expecter) CreateBackup(ctx interface{}, backup interface{}) *MockProvider_CreateBackup_Call {
	return &MockProvider_CreateBackup_Call{Call: _e.mock.On("CreateBackup", ctx, backup)}
}

func (_c *MockProvider_CreateBackup_Call) Run(run func(ctx context.Context, backup *v1.Backup)) *MockProvider_CreateBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Backup))
	})
	return _c
}

func (_c *MockProvider_CreateBackup_Call) Return(_a0 error) *MockProvider_CreateBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_CreateBackup_Call) RunAndReturn(run func(context.Context, *v1.Backup) error) *MockProvider_CreateBackup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRestore provides a mock function with given fields: ctx, restore
func (_m *MockProvider) CreateRestore(ctx context.Context, restore *v1.Restore) error {
	ret := _m.Called(ctx, restore)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Restore) error); ok {
		r0 = rf(ctx, restore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_CreateRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRestore'
type MockProvider_CreateRestore_Call struct {
	*mock.Call
}

// CreateRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - restore *v1.Restore
func (_e *MockProvider_Expecter) CreateRestore(ctx interface{}, restore interface{}) *MockProvider_CreateRestore_Call {
	return &MockProvider_CreateRestore_Call{Call: _e.mock.On("CreateRestore", ctx, restore)}
}

func (_c *MockProvider_CreateRestore_Call) Run(run func(ctx context.Context, restore *v1.Restore)) *MockProvider_CreateRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Restore))
	})
	return _c
}

func (_c *MockProvider_CreateRestore_Call) Return(_a0 error) *MockProvider_CreateRestore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_CreateRestore_Call) RunAndReturn(run func(context.Context, *v1.Restore) error) *MockProvider_CreateRestore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackup provides a mock function with given fields: ctx, backup
func (_m *MockProvider) DeleteBackup(ctx context.Context, backup *v1.Backup) error {
	ret := _m.Called(ctx, backup)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) error); ok {
		r0 = rf(ctx, backup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_DeleteBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackup'
type MockProvider_DeleteBackup_Call struct {
	*mock.Call
}

// DeleteBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - backup *v1.Backup
func (_e *MockProvider_Expecter) DeleteBackup(ctx interface{}, backup interface{}) *MockProvider_DeleteBackup_Call {
	return &MockProvider_DeleteBackup_Call{Call: _e.mock.On("DeleteBackup", ctx, backup)}
}

func (_c *MockProvider_DeleteBackup_Call) Run(run func(ctx context.Context, backup *v1.Backup)) *MockProvider_DeleteBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Backup))
	})
	return _c
}

func (_c *MockProvider_DeleteBackup_Call) Return(_a0 error) *MockProvider_DeleteBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_DeleteBackup_Call) RunAndReturn(run func(context.Context, *v1.Backup) error) *MockProvider_DeleteBackup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRestore provides a mock function with given fields: ctx, restore
func (_m *MockProvider) DeleteRestore(ctx context.Context, restore *v1.Restore) error {
	ret := _m.Called(ctx, restore)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRestore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Restore) error); ok {
		r0 = rf(ctx, restore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_DeleteRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRestore'
type MockProvider_DeleteRestore_Call struct {
	*mock.Call
}

// DeleteRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - restore *v1.Restore
func (_e *MockProvider_Expecter) DeleteRestore(ctx interface{}, restore interface{}) *MockProvider_DeleteRestore_Call {
	return &MockProvider_DeleteRestore_Call{Call: _e.mock.On("DeleteRestore", ctx, restore)}
}

func (_c *MockProvider_DeleteRestore_Call) Run(run func(ctx context.Context, restore *v1.Restore)) *MockProvider_DeleteRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Restore))
	})
	return _c
}

func (_c *MockProvider_DeleteRestore_Call) Return(_a0 error) *MockProvider_DeleteRestore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_DeleteRestore_Call) RunAndReturn(run func(context.Context, *v1.Restore) error) *MockProvider_DeleteRestore_Call {
	_c.Call.Return(run)
	return _c
}

// SyncBackupStatus provides a mock function with given fields: ctx, backup
func (_m *MockProvider) SyncBackupStatus(ctx context.Context, backup *v1.Backup) error {
	ret := _m.Called(ctx, backup)

	if len(ret) == 0 {
		panic("no return value specified for SyncBackupStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) error); ok {
		r0 = rf(ctx, backup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_SyncBackupStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBackupStatus'
type MockProvider_SyncBackupStatus_Call struct {
	*mock.Call
}

// SyncBackupStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - backup *v1.Backup
func (_e *MockProvider_Expecter) SyncBackupStatus(ctx interface{}, backup interface{}) *MockProvider_SyncBackupStatus_Call {
	return &MockProvider_SyncBackupStatus_Call{Call: _e.mock.On("SyncBackupStatus", ctx, backup)}
}

func (_c *MockProvider_SyncBackupStatus_Call) Run(run func(ctx context.Context, backup *v1.Backup)) *MockProvider_SyncBackupStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Backup))
	})
	return _c
}

func (_c *MockProvider_SyncBackupStatus_Call) Return(_a0 error) *MockProvider_SyncBackupStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_SyncBackupStatus_Call) RunAndReturn(run func(context.Context, *v1.Backup) error) *MockProvider_SyncBackupStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SyncBackups provides a mock function with given fields: ctx
func (_m *MockProvider) SyncBackups(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncBackups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_SyncBackups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBackups'
type MockProvider_SyncBackups_Call struct {
	*mock.Call
}

// SyncBackups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) SyncBackups(ctx interface{}) *MockProvider_SyncBackups_Call {
	return &MockProvider_SyncBackups_Call{Call: _e.mock.On("SyncBackups", ctx)}
}

func (_c *MockProvider_SyncBackups_Call) Run(run func(ctx context.Context)) *MockProvider_SyncBackups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProvider_SyncBackups_Call) Return(_a0 error) *MockProvider_SyncBackups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_SyncBackups_Call) RunAndReturn(run func(context.Context) error) *MockProvider_SyncBackups_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
